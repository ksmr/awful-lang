type token =
  | INT of (int)
  | FLOAT of (float)
  | SYMBOL of (string)
  | BOOL of (bool)
  | BINOP of (Expr.binop)
  | PLUS
  | MINUS
  | PROD
  | DIV
  | RPAREN
  | LPAREN
  | EOF
  | UMINUS
  | EQ
  | LT
  | OR
  | AND
  | NOT
  | LET
  | IN
  | FUN
  | REC
  | ARROW
  | FUNTERM
  | IF
  | THEN
  | ELSE

open Parsing;;
# 2 "src//parser.mly"
  open Expr
# 34 "src//parser.ml"
let yytransl_const = [|
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* PROD *);
  265 (* DIV *);
  266 (* RPAREN *);
  267 (* LPAREN *);
    0 (* EOF *);
  268 (* UMINUS *);
  269 (* EQ *);
  270 (* LT *);
  271 (* OR *);
  272 (* AND *);
  273 (* NOT *);
  274 (* LET *);
  275 (* IN *);
  276 (* FUN *);
  277 (* REC *);
  278 (* ARROW *);
  279 (* FUNTERM *);
  280 (* IF *);
  281 (* THEN *);
  282 (* ELSE *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* SYMBOL *);
  260 (* BOOL *);
  261 (* BINOP *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\006\000\007\000\004\000\004\000\006\000\003\000\003\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yydgoto = "\002\000\
\013\000\032\000"

let yysindex = "\003\000\
\005\001\000\000\000\000\000\000\000\000\000\000\001\255\005\001\
\005\001\253\254\002\255\005\001\000\000\227\000\000\000\133\255\
\251\000\249\254\004\255\242\254\099\255\005\001\005\001\029\001\
\005\001\005\001\000\000\005\001\005\001\005\001\005\001\172\255\
\000\000\005\001\252\254\005\001\005\001\227\255\053\001\000\000\
\053\001\172\255\172\255\251\000\251\000\251\000\251\000\162\255\
\005\001\227\255\065\255\005\001\201\255\005\001\227\255\005\001\
\227\255\227\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\094\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\172\000\060\000\000\000\
\077\000\022\000\043\000\111\000\128\000\145\000\162\000\179\000\
\000\000\189\000\000\000\000\000\000\000\000\000\191\000\000\000\
\193\000\201\000"

let yygindex = "\000\000\
\000\000\002\000"

let yytablesize = 589
let yytable = "\018\000\
\007\000\015\000\014\000\001\000\020\000\034\000\035\000\036\000\
\049\000\016\000\017\000\000\000\000\000\021\000\000\000\000\000\
\000\000\019\000\000\000\000\000\000\000\017\000\000\000\038\000\
\039\000\041\000\042\000\043\000\000\000\044\000\045\000\046\000\
\047\000\000\000\000\000\048\000\000\000\050\000\051\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\000\000\000\000\055\000\000\000\057\000\
\000\000\058\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\005\000\006\000\022\000\023\000\024\000\
\025\000\026\000\000\000\008\000\015\000\028\000\029\000\030\000\
\031\000\009\000\010\000\000\000\011\000\000\000\000\000\000\000\
\012\000\000\000\054\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\003\000\004\000\005\000\006\000\022\000\
\023\000\024\000\025\000\026\000\000\000\008\000\019\000\028\000\
\029\000\030\000\031\000\009\000\010\000\000\000\011\000\000\000\
\000\000\000\000\012\000\037\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\003\000\004\000\005\000\
\006\000\022\000\023\000\024\000\025\000\026\000\033\000\008\000\
\021\000\028\000\029\000\030\000\031\000\009\000\010\000\000\000\
\011\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\022\000\003\000\004\000\005\000\006\000\022\000\023\000\
\024\000\025\000\026\000\024\000\003\000\004\000\005\000\006\000\
\022\000\000\000\011\000\010\000\052\000\011\000\000\000\000\000\
\000\000\012\000\000\000\000\000\012\000\010\000\009\000\011\000\
\013\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\010\000\003\000\004\000\005\000\006\000\022\000\023\000\024\000\
\025\000\026\000\000\000\008\000\000\000\028\000\029\000\030\000\
\031\000\009\000\010\000\056\000\011\000\000\000\000\000\000\000\
\012\000\000\000\027\000\003\000\004\000\005\000\006\000\022\000\
\023\000\024\000\025\000\026\000\000\000\008\000\000\000\028\000\
\029\000\030\000\031\000\009\000\010\000\000\000\011\000\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\007\000\
\007\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\017\000\017\000\017\000\017\000\017\000\
\017\000\000\000\017\000\017\000\017\000\017\000\017\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\017\000\017\000\
\018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\018\000\018\000\018\000\018\000\000\000\018\000\000\000\000\000\
\000\000\014\000\014\000\018\000\018\000\014\000\014\000\000\000\
\014\000\014\000\014\000\014\000\014\000\000\000\014\000\000\000\
\000\000\000\000\015\000\015\000\014\000\014\000\015\000\015\000\
\000\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
\000\000\000\000\000\000\000\000\000\000\015\000\015\000\006\000\
\006\000\000\000\006\000\006\000\006\000\006\000\006\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\006\000\006\000\
\019\000\019\000\000\000\019\000\019\000\019\000\019\000\019\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\019\000\
\019\000\020\000\020\000\000\000\020\000\020\000\020\000\020\000\
\020\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
\020\000\020\000\021\000\021\000\000\000\021\000\021\000\021\000\
\021\000\021\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\021\000\021\000\022\000\022\000\000\000\022\000\022\000\
\022\000\022\000\022\000\000\000\022\000\024\000\000\000\000\000\
\000\000\000\000\022\000\022\000\011\000\011\000\024\000\011\000\
\011\000\011\000\011\000\011\000\024\000\024\000\012\000\000\000\
\009\000\000\000\013\000\011\000\011\000\000\000\000\000\012\000\
\000\000\009\000\010\000\013\000\000\000\012\000\012\000\009\000\
\009\000\013\000\013\000\010\000\000\000\000\000\000\000\000\000\
\000\000\010\000\010\000\003\000\004\000\005\000\006\000\022\000\
\023\000\024\000\025\000\026\000\000\000\008\000\000\000\028\000\
\029\000\030\000\031\000\009\000\010\000\000\000\011\000\000\000\
\000\000\000\000\012\000\003\000\004\000\005\000\006\000\022\000\
\023\000\024\000\025\000\026\000\000\000\003\000\004\000\005\000\
\006\000\000\000\000\000\007\000\010\000\000\000\011\000\008\000\
\000\000\000\000\012\000\000\000\000\000\009\000\010\000\000\000\
\011\000\000\000\000\000\000\000\012\000\040\000\004\000\005\000\
\006\000\000\000\000\000\007\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\009\000\010\000\000\000\
\011\000\000\000\000\000\000\000\012\000\003\000\004\000\005\000\
\006\000\022\000\000\000\000\000\025\000\026\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
\011\000\000\000\000\000\000\000\012\000"

let yycheck = "\003\001\
\000\000\001\001\001\000\001\000\003\001\013\001\003\001\022\001\
\013\001\008\000\009\000\255\255\255\255\012\000\255\255\255\255\
\255\255\021\001\255\255\255\255\255\255\000\000\255\255\022\000\
\023\000\024\000\025\000\026\000\255\255\028\000\029\000\030\000\
\031\000\255\255\255\255\034\000\255\255\036\000\037\000\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\000\255\255\255\255\052\000\255\255\054\000\
\255\255\056\000\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\000\000\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\011\001\000\000\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\000\000\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\000\000\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\000\000\001\001\002\001\003\001\004\001\
\005\001\255\255\000\000\018\001\019\001\020\001\255\255\255\255\
\255\255\024\001\255\255\255\255\000\000\018\001\000\000\020\001\
\000\000\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\000\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\255\255\000\000\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\255\255\255\255\
\255\255\006\001\007\001\025\001\026\001\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\255\255\
\255\255\255\255\006\001\007\001\025\001\026\001\010\001\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\010\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\010\001\255\255\255\255\
\255\255\255\255\025\001\026\001\010\001\011\001\019\001\013\001\
\014\001\015\001\016\001\017\001\025\001\026\001\010\001\255\255\
\010\001\255\255\010\001\025\001\026\001\255\255\255\255\019\001\
\255\255\019\001\010\001\019\001\255\255\025\001\026\001\025\001\
\026\001\025\001\026\001\019\001\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\024\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\018\001\255\255\020\001\011\001\
\255\255\255\255\024\001\255\255\255\255\017\001\018\001\255\255\
\020\001\255\255\255\255\255\255\024\001\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\020\001\255\255\255\255\255\255\024\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\020\001\255\255\255\255\255\255\024\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  PROD\000\
  DIV\000\
  RPAREN\000\
  LPAREN\000\
  EOF\000\
  UMINUS\000\
  EQ\000\
  LT\000\
  OR\000\
  AND\000\
  NOT\000\
  LET\000\
  IN\000\
  FUN\000\
  REC\000\
  ARROW\000\
  FUNTERM\000\
  IF\000\
  THEN\000\
  ELSE\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  SYMBOL\000\
  BOOL\000\
  BINOP\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 27 "src//parser.mly"
           ( _1 )
# 309 "src//parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 30 "src//parser.mly"
      ( Int _1 )
# 316 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 31 "src//parser.mly"
        ( Float _1 )
# 323 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 32 "src//parser.mly"
         ( Symbol _1 )
# 330 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 33 "src//parser.mly"
       ( Bool _1 )
# 337 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "src//parser.mly"
           ( Not(_2) )
# 344 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "src//parser.mly"
                        ( Appl(_1, _2) )
# 352 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 36 "src//parser.mly"
                     ( _2 )
# 359 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "src//parser.mly"
                             ( Decl(_2, _4, _6) )
# 368 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "src//parser.mly"
                                 ( Declrec(_3, _5, _7) )
# 377 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "src//parser.mly"
                     ( Def(_2, _4) )
# 385 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "src//parser.mly"
                        ( Fct(_2, _4) )
# 393 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "src//parser.mly"
                              ( If(_2, _4, _6) )
# 402 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 42 "src//parser.mly"
                 ( Binop (Plus, _1, _3) )
# 410 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "src//parser.mly"
                  ( Binop (Minus, _1, _3) )
# 418 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 44 "src//parser.mly"
            ( Int ((-1)*_2) )
# 425 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "src//parser.mly"
                 ( Binop (Prod, _1, _3) )
# 433 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "src//parser.mly"
                ( Binop (Div, _1, _3) )
# 441 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "src//parser.mly"
               ( Binop (Eq, _1, _3) )
# 449 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "src//parser.mly"
               ( Binop (Lt, _1, _3) )
# 457 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "src//parser.mly"
               ( Binop (Or, _1, _3) )
# 465 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "src//parser.mly"
                ( Binop (And, _1, _3) )
# 473 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "src//parser.mly"
               ( Binop(Eq, _1, _3) )
# 481 "src//parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Expr.binop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "src//parser.mly"
                  ( Binop (_2, _1, _3) )
# 490 "src//parser.ml"
               : 'expr))
(* Entry top *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let top (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr.expr)
